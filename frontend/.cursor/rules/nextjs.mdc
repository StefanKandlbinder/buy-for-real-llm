# Buy For Real - Next.js Project Rules (Overview)

This document serves as an overview of the technology-specific cursor rules for this Next.js application. Each technology has its own dedicated rules file for focused guidance.

## Technology Stack Overview

This project uses a modern, type-safe stack with the following core technologies:

- **Framework**: Next.js 15.4.2 (App Router) → See `framework.mdc`
- **React**: 19.1.0 with React Compiler → See `react.mdc`
- **API Layer**: tRPC v11.4.3 → See `trpc.mdc`
- **Database**: PostgreSQL with Drizzle ORM 0.44.3 → See `database.mdc`
- **Authentication**: Clerk 6.25.4 → See `authentication.mdc`
- **State Management**: React Query 5.83.0 → See `react-query.mdc`
- **Styling**: Tailwind CSS 4.x + shadcn/ui → See `styling.mdc`
- **Validation**: Zod 4.0.5 → See `validation.mdc`
- **File Storage**: Pinata IPFS 2.4.9 → See `file-storage.mdc`

## Architecture Philosophy

### API-First Design

- **Primary**: tRPC for all database and server-side logic
- **Exception**: Next.js Server Actions for file uploads (multipart/form-data)
- **Integration**: Server Actions use tRPC server-side caller for database operations

### Component Architecture

- **Server Components**: Default for data fetching and rendering
- **Client Components**: Only for interactivity (event handlers, hooks)
- **Optimization**: React Compiler handles automatic memoization

### Data Flow Pattern

```
Client → tRPC Query/Mutation → Server → Database
                ↓
Client ← Optimistic Updates ← React Query ← tRPC Response
```

## Development Workflow

### Getting Started

```bash
# Install dependencies
pnpm install

# Set up environment variables (see individual .mdc files)
cp .env.example .env.local

# Run database migrations
pnpm db:migrate

# Start development server
pnpm dev
```

### Code Generation & Type Safety

- Database schema generates tRPC types automatically
- React Query provides client-side type safety
- Zod schemas generate validation types
- Full end-to-end type safety from DB → API → UI

### Performance Strategy

- **Optimistic Updates**: Default for all mutations (React Query)
- **Automatic Optimization**: React Compiler handles memoization
- **Edge-First**: Vercel deployment with edge functions
- **IPFS Storage**: Decentralized file storage via Pinata

## Quick Reference

### File Organization

```
src/
├── app/                 # Next.js App Router (thin, delegates to features)
├── features/            # Domain modules (groups, products, advertisements, media)
│   └── <feature>/{components,hooks,api,validation,lib}
├── shared/              # Cross-feature components and hooks
├── components/ui/       # shadcn/ui primitives
├── lib/                 # Utility libraries and configurations
├── trpc/                # tRPC server and client setup
├── db/                  # Database schema and client
├── actions/             # Next.js Server Actions
└── types/               # TypeScript type definitions
```

### Key Patterns

- **Mutations**: Always implement optimistic updates
- **Components**: Use React 19 ref-as-prop pattern
- **Validation**: Zod schemas with tRPC integration
- **Authentication**: Clerk middleware protection
- **Styling**: Tailwind utilities with shadcn/ui components

### Development Rules

1. **Type Safety First**: Use TypeScript throughout
2. **Server Components Default**: Add 'use client' only when needed
3. **Optimistic Updates**: Default pattern for all mutations
4. **React Compiler**: Let it handle optimization automatically
5. **tRPC Everything**: Use for all data operations except file uploads

## Technology-Specific Guidance

For detailed implementation guidance, refer to the technology-specific cursor rules files:

- **`framework.mdc`** - Next.js App Router, SSR, routing patterns
- **`react.mdc`** - React 19 features, component patterns, hooks
- **`trpc.mdc`** - API routes, mutations, queries, validation
- **`database.mdc`** - Drizzle ORM, schema design, queries
- **`authentication.mdc`** - Clerk setup, middleware, protection
- **`react-query.mdc`** - Optimistic updates, caching, state management
- **`styling.mdc`** - Tailwind CSS, shadcn/ui, responsive design
- **`validation.mdc`** - Zod schemas, form validation, error handling
- **`file-storage.mdc`** - Pinata IPFS, file uploads, media management

Each file contains comprehensive patterns, examples, and best practices specific to that technology.

## Project Conventions

### Naming

- **Types**: Prefix with `T` (e.g., `TUser`, `TGroupSchema`)
- **Components**: PascalCase (e.g., `UserProfile`, `MediaCard`)
- **Hooks**: Prefix with `use` (e.g., `useAuth`, `useMedia`)
- **Server Actions**: Suffix with `Action` (e.g., `uploadMediaAction`)

### Code Style

- **ESLint**: Configured with Next.js rules
- **TypeScript**: Strict mode enabled
- **Formatting**: Prettier integration
- **Imports**: Absolute imports with `@/` prefix

### Error Handling

- **Client**: React Query error boundaries + toast notifications
- **Server**: tRPC error formatting with proper status codes
- **Validation**: Zod schema validation with user-friendly messages
- **Files**: Graceful degradation with proper fallbacks

This architecture ensures type safety, performance, and excellent developer experience while maintaining clean separation of concerns across all technology layers.
