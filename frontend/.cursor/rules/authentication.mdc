# Authentication (Clerk) Rules

## Core Configuration

### Versions

- **@clerk/nextjs**: 6.25.4
- **@clerk/themes**: 2.3.3
- **Integration**: Next.js 15.4.2 App Router

### Environment Variables

```bash
# .env.local
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_...
CLERK_SECRET_KEY=sk_test_...
NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in
NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up
NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/dashboard
NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=/dashboard
```

### Middleware Setup

```typescript
// src/middleware.ts
import { clerkMiddleware, createRouteMatcher } from "@clerk/nextjs/server";

const isProtectedRoute = createRouteMatcher([
  "/dashboard(.*)",
  "/products(.*)",
  "/settings(.*)",
  "/api/trpc(.*)",
]);

export default clerkMiddleware(async (auth, req) => {
  if (isProtectedRoute(req)) {
    await auth.protect();
  }
});

export const config = {
  matcher: [
    // Skip Next.js internals and all static files, unless found in search params
    "/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)",
    // Always run for API routes
    "/(api|trpc)(.*)",
  ],
};
```

### Root Layout Provider

```typescript
// app/layout.tsx
import { ClerkProvider } from "@clerk/nextjs";
import { dark } from "@clerk/themes";

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <ClerkProvider
      appearance={{
        baseTheme: dark, // or light
        variables: {
          colorPrimary: "#3b82f6",
          colorBackground: "#1a1a1a",
          colorInputBackground: "#2a2a2a",
          colorInputText: "#ffffff",
        },
        elements: {
          formButtonPrimary: "bg-blue-600 hover:bg-blue-700",
          card: "bg-gray-900 border border-gray-800",
        },
      }}
      publishableKey={process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
    >
      <html lang="en">
        <body>{children}</body>
      </html>
    </ClerkProvider>
  );
}
```

## Authentication Pages

### Sign In Page

```typescript
// app/sign-in/[[...sign-in]]/page.tsx
import { SignIn } from "@clerk/nextjs";

export default function Page() {
  return (
    <div className="flex min-h-screen items-center justify-center">
      <SignIn
        appearance={{
          elements: {
            rootBox: "mx-auto",
            card: "shadow-2xl",
          },
        }}
        routing="path"
        path="/sign-in"
        redirectUrl="/dashboard"
        signUpUrl="/sign-up"
      />
    </div>
  );
}
```

### Sign Up Page

```typescript
// app/sign-up/[[...sign-up]]/page.tsx
import { SignUp } from "@clerk/nextjs";

export default function Page() {
  return (
    <div className="flex min-h-screen items-center justify-center">
      <SignUp
        appearance={{
          elements: {
            rootBox: "mx-auto",
            card: "shadow-2xl",
          },
        }}
        routing="path"
        path="/sign-up"
        redirectUrl="/dashboard"
        signInUrl="/sign-in"
      />
    </div>
  );
}
```

### User Profile Page

```typescript
// app/settings/profile/page.tsx
import { UserProfile } from "@clerk/nextjs";

export default function Page() {
  return (
    <div className="flex justify-center py-8">
      <UserProfile
        appearance={{
          elements: {
            rootBox: "w-full max-w-4xl",
            card: "shadow-none border border-gray-200",
          },
        }}
        routing="path"
        path="/settings/profile"
      />
    </div>
  );
}
```

## Authentication Hooks & Components

### Custom Authentication Hook

```typescript
// hooks/use-auth.ts
import { useUser, useAuth as useClerkAuth } from "@clerk/nextjs";
import { redirect } from "next/navigation";

export function useAuth() {
  const { isLoaded, isSignedIn, user } = useUser();
  const { getToken, signOut } = useClerkAuth();

  const requireAuth = () => {
    if (isLoaded && !isSignedIn) {
      redirect("/sign-in");
    }
  };

  const getUserId = () => {
    if (!user?.id) {
      throw new Error("User not authenticated");
    }
    return user.id;
  };

  const getAuthToken = async () => {
    try {
      return await getToken();
    } catch (error) {
      console.error("Failed to get auth token:", error);
      return null;
    }
  };

  return {
    isLoaded,
    isSignedIn,
    user,
    requireAuth,
    getUserId,
    getAuthToken,
    signOut,
  };
}
```

### Protected Route Component

```typescript
// components/auth/protected-route.tsx
"use client";

import { useAuth } from "@clerk/nextjs";
import { useRouter } from "next/navigation";
import { useEffect } from "react";

type TProtectedRouteProps = {
  children: React.ReactNode;
  fallback?: React.ReactNode;
  redirectTo?: string;
};

export function ProtectedRoute({
  children,
  fallback = <div>Loading...</div>,
  redirectTo = "/sign-in",
}: TProtectedRouteProps) {
  const { isLoaded, isSignedIn } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (isLoaded && !isSignedIn) {
      router.push(redirectTo);
    }
  }, [isLoaded, isSignedIn, router, redirectTo]);

  if (!isLoaded) {
    return <>{fallback}</>;
  }

  if (!isSignedIn) {
    return <>{fallback}</>;
  }

  return <>{children}</>;
}
```

### Auth Status Component

```typescript
// components/auth/auth-status.tsx
"use client";

import { SignedIn, SignedOut, UserButton, SignInButton } from "@clerk/nextjs";
import { Button } from "@/components/ui/button";

export function AuthStatus() {
  return (
    <div className="flex items-center gap-4">
      <SignedIn>
        <UserButton
          appearance={{
            elements: {
              avatarBox: "w-8 h-8",
              userButtonPopoverCard: "shadow-2xl",
            },
          }}
          userProfileMode="navigation"
          userProfileUrl="/settings/profile"
        />
      </SignedIn>

      <SignedOut>
        <SignInButton>
          <Button variant="outline">Sign In</Button>
        </SignInButton>
      </SignedOut>
    </div>
  );
}
```

### Role-Based Access Component

```typescript
// components/auth/role-guard.tsx
"use client";

import { useUser } from "@clerk/nextjs";

type TRoleGuardProps = {
  allowedRoles: string[];
  children: React.ReactNode;
  fallback?: React.ReactNode;
};

export function RoleGuard({
  allowedRoles,
  children,
  fallback = <div>Access denied</div>,
}: TRoleGuardProps) {
  const { user, isLoaded } = useUser();

  if (!isLoaded) {
    return <div>Loading...</div>;
  }

  const userRole = user?.organizationMemberships?.[0]?.role;
  const hasAccess = userRole && allowedRoles.includes(userRole);

  if (!hasAccess) {
    return <>{fallback}</>;
  }

  return <>{children}</>;
}

// Usage
// <RoleGuard allowedRoles={['admin', 'moderator']}>
//   <AdminPanel />
// </RoleGuard>
```

## Server-Side Authentication

### tRPC Context with Auth

```typescript
// src/trpc/server/context.ts
import { auth } from "@clerk/nextjs/server";
import { db } from "@/db/drizzle";

export async function createTRPCContext() {
  const authData = await auth();

  return {
    db,
    auth: authData,
    userId: authData?.userId || null,
  };
}

export type Context = Awaited<ReturnType<typeof createTRPCContext>>;
```

### Protected tRPC Procedures

```typescript
// src/trpc/server/trpc.ts
import { TRPCError } from "@trpc/server";
import { middleware } from "./trpc";

export const requireAuth = middleware(async ({ ctx, next }) => {
  if (!ctx.auth?.userId) {
    throw new TRPCError({
      code: "UNAUTHORIZED",
      message: "You must be signed in to perform this action",
    });
  }

  return next({
    ctx: {
      ...ctx,
      auth: ctx.auth,
      userId: ctx.auth.userId,
    },
  });
});

export const requireRole = (allowedRoles: string[]) =>
  middleware(async ({ ctx, next }) => {
    if (!ctx.auth?.userId) {
      throw new TRPCError({ code: "UNAUTHORIZED" });
    }

    // Get user role from organization or user metadata
    const userRole = ctx.auth.sessionClaims?.metadata?.role;

    if (!userRole || !allowedRoles.includes(userRole)) {
      throw new TRPCError({
        code: "FORBIDDEN",
        message: "Insufficient permissions",
      });
    }

    return next({
      ctx: {
        ...ctx,
        auth: ctx.auth,
        userId: ctx.auth.userId,
        userRole,
      },
    });
  });

// Usage in procedures
export const protectedProcedure = publicProcedure.use(requireAuth);
export const adminProcedure = publicProcedure.use(requireRole(["admin"]));
```

### Server Actions with Auth

```typescript
// src/actions/protected-action.ts
"use server";

import { auth } from "@clerk/nextjs/server";
import { redirect } from "next/navigation";

export async function protectedAction(data: FormData) {
  const { userId } = await auth();

  if (!userId) {
    redirect("/sign-in");
  }

  // Perform action with authenticated user
  const result = await performDatabaseOperation(userId, data);

  return result;
}

// Higher-order function for auth protection
export function withAuth<T extends any[], R>(
  action: (userId: string, ...args: T) => Promise<R>
) {
  return async (...args: T): Promise<R> => {
    const { userId } = await auth();

    if (!userId) {
      throw new Error("Authentication required");
    }

    return action(userId, ...args);
  };
}

// Usage
export const createGroupAction = withAuth(
  async (userId: string, groupData: NewGroup) => {
    return await db
      .insert(groups)
      .values({
        ...groupData,
        userId,
      })
      .returning();
  }
);
```

## Organization & Team Management

### Organization Component

```typescript
// components/auth/organization-switcher.tsx
"use client";

import { OrganizationSwitcher } from "@clerk/nextjs";

export function OrganizationSwitcherComponent() {
  return (
    <OrganizationSwitcher
      appearance={{
        elements: {
          organizationSwitcherTrigger: "border border-gray-300 rounded-md",
          organizationSwitcherPopoverCard: "shadow-2xl",
        },
      }}
      createOrganizationMode="navigation"
      createOrganizationUrl="/organizations/create"
      organizationProfileMode="navigation"
      organizationProfileUrl="/organizations/profile"
    />
  );
}
```

### Organization Context

```typescript
// hooks/use-organization.ts
import { useOrganization, useUser } from "@clerk/nextjs";

export function useOrganizationContext() {
  const { organization, isLoaded: orgLoaded } = useOrganization();
  const { user, isLoaded: userLoaded } = useUser();

  const isLoaded = orgLoaded && userLoaded;
  const isPersonalWorkspace = !organization;
  const workspaceId = organization?.id || user?.id;
  const workspaceName = organization?.name || "Personal";

  const hasRole = (role: string) => {
    if (!organization) return true; // Personal workspace
    return user?.organizationMemberships?.some(
      (membership) =>
        membership.organization.id === organization.id &&
        membership.role === role
    );
  };

  const isAdmin = hasRole("admin");
  const isMember = hasRole("basic_member");

  return {
    organization,
    isLoaded,
    isPersonalWorkspace,
    workspaceId,
    workspaceName,
    hasRole,
    isAdmin,
    isMember,
  };
}
```

## Webhooks

### Webhook Handler

```typescript
// app/api/webhooks/clerk/route.ts
import { Webhook } from "svix";
import { headers } from "next/headers";
import { WebhookEvent } from "@clerk/nextjs/server";
import { db } from "@/db/drizzle";
import { users } from "@/db/schema";

export async function POST(req: Request) {
  const WEBHOOK_SECRET = process.env.CLERK_WEBHOOK_SECRET;

  if (!WEBHOOK_SECRET) {
    throw new Error("Please add CLERK_WEBHOOK_SECRET to .env.local");
  }

  // Get the headers
  const headerPayload = headers();
  const svix_id = headerPayload.get("svix-id");
  const svix_timestamp = headerPayload.get("svix-timestamp");
  const svix_signature = headerPayload.get("svix-signature");

  if (!svix_id || !svix_timestamp || !svix_signature) {
    return new Response("Error occurred -- no svix headers", {
      status: 400,
    });
  }

  const payload = await req.json();
  const body = JSON.stringify(payload);

  const wh = new Webhook(WEBHOOK_SECRET);

  let evt: WebhookEvent;

  try {
    evt = wh.verify(body, {
      "svix-id": svix_id,
      "svix-timestamp": svix_timestamp,
      "svix-signature": svix_signature,
    }) as WebhookEvent;
  } catch (err) {
    console.error("Error verifying webhook:", err);
    return new Response("Error occurred", {
      status: 400,
    });
  }

  // Handle the webhook
  switch (evt.type) {
    case "user.created":
      await db.insert(users).values({
        id: evt.data.id,
        email: evt.data.email_addresses[0]?.email_address,
        firstName: evt.data.first_name,
        lastName: evt.data.last_name,
        imageUrl: evt.data.image_url,
      });
      break;

    case "user.updated":
      await db
        .update(users)
        .set({
          email: evt.data.email_addresses[0]?.email_address,
          firstName: evt.data.first_name,
          lastName: evt.data.last_name,
          imageUrl: evt.data.image_url,
          updatedAt: new Date(),
        })
        .where(eq(users.id, evt.data.id));
      break;

    case "user.deleted":
      await db.delete(users).where(eq(users.id, evt.data.id!));
      break;

    default:
      console.log(`Unhandled webhook event: ${evt.type}`);
  }

  return new Response("", { status: 200 });
}
```

## Advanced Authentication Patterns

### Custom Claims & Metadata

```typescript
// lib/auth-utils.ts
import { auth, clerkClient } from "@clerk/nextjs/server";

export async function updateUserMetadata(
  userId: string,
  metadata: Record<string, any>
) {
  await clerkClient.users.updateUser(userId, {
    publicMetadata: metadata,
  });
}

export async function getUserRole(userId: string): Promise<string | null> {
  const user = await clerkClient.users.getUser(userId);
  return (user.publicMetadata?.role as string) || null;
}

export async function requireRole(allowedRoles: string[]) {
  const { userId } = await auth();

  if (!userId) {
    throw new Error("Authentication required");
  }

  const userRole = await getUserRole(userId);

  if (!userRole || !allowedRoles.includes(userRole)) {
    throw new Error("Insufficient permissions");
  }

  return { userId, userRole };
}
```

### Multi-Factor Authentication

```typescript
// components/auth/mfa-settings.tsx
"use client";

import { useUser } from "@clerk/nextjs";
import { Button } from "@/components/ui/button";

export function MFASettings() {
  const { user } = useUser();

  const enableMFA = async () => {
    if (!user) return;

    try {
      await user.createTOTP();
      // Handle MFA setup flow
    } catch (error) {
      console.error("Failed to enable MFA:", error);
    }
  };

  const disableMFA = async () => {
    if (!user) return;

    try {
      await user.deleteTOTP();
      // Handle MFA disable flow
    } catch (error) {
      console.error("Failed to disable MFA:", error);
    }
  };

  const hasMFA = user?.twoFactorEnabled;

  return (
    <div className="space-y-4">
      <h3>Two-Factor Authentication</h3>
      <p>
        Status:{" "}
        <span className={hasMFA ? "text-green-600" : "text-gray-600"}>
          {hasMFA ? "Enabled" : "Disabled"}
        </span>
      </p>

      {hasMFA ? (
        <Button onClick={disableMFA} variant="destructive">
          Disable MFA
        </Button>
      ) : (
        <Button onClick={enableMFA}>Enable MFA</Button>
      )}
    </div>
  );
}
```

## Best Practices

### Security

- Always validate authentication on both client and server
- Use middleware for route protection
- Implement proper role-based access control
- Handle webhook security properly
- Store sensitive data server-side only

### Performance

- Use Clerk's built-in caching
- Implement proper loading states
- Minimize authentication checks in components
- Use server-side authentication for data fetching

### User Experience

- Provide clear authentication states
- Implement proper redirects after auth actions
- Use Clerk's customization options for branding
- Handle offline authentication gracefully

### Development

- Use TypeScript for type safety
- Implement proper error handling
- Test authentication flows thoroughly
- Monitor authentication metrics
- Keep Clerk SDK updated
  description:
  globs:
  alwaysApply: false

---
